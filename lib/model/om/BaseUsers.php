<?php

/**
 * Base class that represents a row from the 'users' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * 04/15/13 20:46:44
 *
 * @package    lib.model.om
 */
abstract class BaseUsers extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        UsersPeer
	 */
	protected static $peer;

	/**
	 * The value for the use_id2 field.
	 * @var        int
	 */
	protected $use_id2;

	/**
	 * The value for the use_id field.
	 * @var        string
	 */
	protected $use_id;

	/**
	 * The value for the con_id field.
	 * @var        int
	 */
	protected $con_id;

	/**
	 * The value for the use_name field.
	 * @var        string
	 */
	protected $use_name;

	/**
	 * The value for the use_first_name field.
	 * @var        string
	 */
	protected $use_first_name;

	/**
	 * The value for the use_middle_name field.
	 * @var        string
	 */
	protected $use_middle_name;

	/**
	 * The value for the use_last_name field.
	 * @var        string
	 */
	protected $use_last_name;

	/**
	 * The value for the use_gender field.
	 * @var        string
	 */
	protected $use_gender;

	/**
	 * The value for the use_locale field.
	 * @var        string
	 */
	protected $use_locale;

	/**
	 * The value for the use_link field.
	 * @var        string
	 */
	protected $use_link;

	/**
	 * The value for the use_birthday field.
	 * @var        string
	 */
	protected $use_birthday;

	/**
	 * The value for the use_email field.
	 * @var        string
	 */
	protected $use_email;

	/**
	 * The value for the use_location field.
	 * @var        string
	 */
	protected $use_location;

	/**
	 * The value for the use_website field.
	 * @var        string
	 */
	protected $use_website;

	/**
	 * The value for the created_at field.
	 * @var        string
	 */
	protected $created_at;

	/**
	 * The value for the updated_at field.
	 * @var        string
	 */
	protected $updated_at;

	/**
	 * @var        Concurso
	 */
	protected $aConcurso;

	/**
	 * @var        array Checkins[] Collection to store aggregation of Checkins objects.
	 */
	protected $collCheckinss;

	/**
	 * @var        Criteria The criteria used to select the current contents of collCheckinss.
	 */
	private $lastCheckinsCriteria = null;

	/**
	 * @var        array Friends[] Collection to store aggregation of Friends objects.
	 */
	protected $collFriendss;

	/**
	 * @var        Criteria The criteria used to select the current contents of collFriendss.
	 */
	private $lastFriendsCriteria = null;

	/**
	 * @var        array Groups[] Collection to store aggregation of Groups objects.
	 */
	protected $collGroupss;

	/**
	 * @var        Criteria The criteria used to select the current contents of collGroupss.
	 */
	private $lastGroupsCriteria = null;

	/**
	 * @var        array Interest[] Collection to store aggregation of Interest objects.
	 */
	protected $collInterests;

	/**
	 * @var        Criteria The criteria used to select the current contents of collInterests.
	 */
	private $lastInterestCriteria = null;

	/**
	 * @var        array Likes[] Collection to store aggregation of Likes objects.
	 */
	protected $collLikess;

	/**
	 * @var        Criteria The criteria used to select the current contents of collLikess.
	 */
	private $lastLikesCriteria = null;

	/**
	 * @var        array Pages[] Collection to store aggregation of Pages objects.
	 */
	protected $collPagess;

	/**
	 * @var        Criteria The criteria used to select the current contents of collPagess.
	 */
	private $lastPagesCriteria = null;

	/**
	 * @var        array Statuses[] Collection to store aggregation of Statuses objects.
	 */
	protected $collStatusess;

	/**
	 * @var        Criteria The criteria used to select the current contents of collStatusess.
	 */
	private $lastStatusesCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'UsersPeer';

	/**
	 * Get the [use_id2] column value.
	 * 
	 * @return     int
	 */
	public function getUseId2()
	{
		return $this->use_id2;
	}

	/**
	 * Get the [use_id] column value.
	 * 
	 * @return     string
	 */
	public function getUseId()
	{
		return $this->use_id;
	}

	/**
	 * Get the [con_id] column value.
	 * 
	 * @return     int
	 */
	public function getConId()
	{
		return $this->con_id;
	}

	/**
	 * Get the [use_name] column value.
	 * 
	 * @return     string
	 */
	public function getUseName()
	{
		return $this->use_name;
	}

	/**
	 * Get the [use_first_name] column value.
	 * 
	 * @return     string
	 */
	public function getUseFirstName()
	{
		return $this->use_first_name;
	}

	/**
	 * Get the [use_middle_name] column value.
	 * 
	 * @return     string
	 */
	public function getUseMiddleName()
	{
		return $this->use_middle_name;
	}

	/**
	 * Get the [use_last_name] column value.
	 * 
	 * @return     string
	 */
	public function getUseLastName()
	{
		return $this->use_last_name;
	}

	/**
	 * Get the [use_gender] column value.
	 * 
	 * @return     string
	 */
	public function getUseGender()
	{
		return $this->use_gender;
	}

	/**
	 * Get the [use_locale] column value.
	 * 
	 * @return     string
	 */
	public function getUseLocale()
	{
		return $this->use_locale;
	}

	/**
	 * Get the [use_link] column value.
	 * 
	 * @return     string
	 */
	public function getUseLink()
	{
		return $this->use_link;
	}

	/**
	 * Get the [use_birthday] column value.
	 * 
	 * @return     string
	 */
	public function getUseBirthday()
	{
		return $this->use_birthday;
	}

	/**
	 * Get the [use_email] column value.
	 * 
	 * @return     string
	 */
	public function getUseEmail()
	{
		return $this->use_email;
	}

	/**
	 * Get the [use_location] column value.
	 * 
	 * @return     string
	 */
	public function getUseLocation()
	{
		return $this->use_location;
	}

	/**
	 * Get the [use_website] column value.
	 * 
	 * @return     string
	 */
	public function getUseWebsite()
	{
		return $this->use_website;
	}

	/**
	 * Get the [optionally formatted] temporal [created_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getCreatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->created_at === null) {
			return null;
		}


		if ($this->created_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->created_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [updated_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getUpdatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->updated_at === null) {
			return null;
		}


		if ($this->updated_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->updated_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->updated_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Set the value of [use_id2] column.
	 * 
	 * @param      int $v new value
	 * @return     Users The current object (for fluent API support)
	 */
	public function setUseId2($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->use_id2 !== $v) {
			$this->use_id2 = $v;
			$this->modifiedColumns[] = UsersPeer::USE_ID2;
		}

		return $this;
	} // setUseId2()

	/**
	 * Set the value of [use_id] column.
	 * 
	 * @param      string $v new value
	 * @return     Users The current object (for fluent API support)
	 */
	public function setUseId($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->use_id !== $v) {
			$this->use_id = $v;
			$this->modifiedColumns[] = UsersPeer::USE_ID;
		}

		return $this;
	} // setUseId()

	/**
	 * Set the value of [con_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Users The current object (for fluent API support)
	 */
	public function setConId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->con_id !== $v) {
			$this->con_id = $v;
			$this->modifiedColumns[] = UsersPeer::CON_ID;
		}

		if ($this->aConcurso !== null && $this->aConcurso->getConId() !== $v) {
			$this->aConcurso = null;
		}

		return $this;
	} // setConId()

	/**
	 * Set the value of [use_name] column.
	 * 
	 * @param      string $v new value
	 * @return     Users The current object (for fluent API support)
	 */
	public function setUseName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->use_name !== $v) {
			$this->use_name = $v;
			$this->modifiedColumns[] = UsersPeer::USE_NAME;
		}

		return $this;
	} // setUseName()

	/**
	 * Set the value of [use_first_name] column.
	 * 
	 * @param      string $v new value
	 * @return     Users The current object (for fluent API support)
	 */
	public function setUseFirstName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->use_first_name !== $v) {
			$this->use_first_name = $v;
			$this->modifiedColumns[] = UsersPeer::USE_FIRST_NAME;
		}

		return $this;
	} // setUseFirstName()

	/**
	 * Set the value of [use_middle_name] column.
	 * 
	 * @param      string $v new value
	 * @return     Users The current object (for fluent API support)
	 */
	public function setUseMiddleName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->use_middle_name !== $v) {
			$this->use_middle_name = $v;
			$this->modifiedColumns[] = UsersPeer::USE_MIDDLE_NAME;
		}

		return $this;
	} // setUseMiddleName()

	/**
	 * Set the value of [use_last_name] column.
	 * 
	 * @param      string $v new value
	 * @return     Users The current object (for fluent API support)
	 */
	public function setUseLastName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->use_last_name !== $v) {
			$this->use_last_name = $v;
			$this->modifiedColumns[] = UsersPeer::USE_LAST_NAME;
		}

		return $this;
	} // setUseLastName()

	/**
	 * Set the value of [use_gender] column.
	 * 
	 * @param      string $v new value
	 * @return     Users The current object (for fluent API support)
	 */
	public function setUseGender($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->use_gender !== $v) {
			$this->use_gender = $v;
			$this->modifiedColumns[] = UsersPeer::USE_GENDER;
		}

		return $this;
	} // setUseGender()

	/**
	 * Set the value of [use_locale] column.
	 * 
	 * @param      string $v new value
	 * @return     Users The current object (for fluent API support)
	 */
	public function setUseLocale($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->use_locale !== $v) {
			$this->use_locale = $v;
			$this->modifiedColumns[] = UsersPeer::USE_LOCALE;
		}

		return $this;
	} // setUseLocale()

	/**
	 * Set the value of [use_link] column.
	 * 
	 * @param      string $v new value
	 * @return     Users The current object (for fluent API support)
	 */
	public function setUseLink($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->use_link !== $v) {
			$this->use_link = $v;
			$this->modifiedColumns[] = UsersPeer::USE_LINK;
		}

		return $this;
	} // setUseLink()

	/**
	 * Set the value of [use_birthday] column.
	 * 
	 * @param      string $v new value
	 * @return     Users The current object (for fluent API support)
	 */
	public function setUseBirthday($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->use_birthday !== $v) {
			$this->use_birthday = $v;
			$this->modifiedColumns[] = UsersPeer::USE_BIRTHDAY;
		}

		return $this;
	} // setUseBirthday()

	/**
	 * Set the value of [use_email] column.
	 * 
	 * @param      string $v new value
	 * @return     Users The current object (for fluent API support)
	 */
	public function setUseEmail($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->use_email !== $v) {
			$this->use_email = $v;
			$this->modifiedColumns[] = UsersPeer::USE_EMAIL;
		}

		return $this;
	} // setUseEmail()

	/**
	 * Set the value of [use_location] column.
	 * 
	 * @param      string $v new value
	 * @return     Users The current object (for fluent API support)
	 */
	public function setUseLocation($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->use_location !== $v) {
			$this->use_location = $v;
			$this->modifiedColumns[] = UsersPeer::USE_LOCATION;
		}

		return $this;
	} // setUseLocation()

	/**
	 * Set the value of [use_website] column.
	 * 
	 * @param      string $v new value
	 * @return     Users The current object (for fluent API support)
	 */
	public function setUseWebsite($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->use_website !== $v) {
			$this->use_website = $v;
			$this->modifiedColumns[] = UsersPeer::USE_WEBSITE;
		}

		return $this;
	} // setUseWebsite()

	/**
	 * Sets the value of [created_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Users The current object (for fluent API support)
	 */
	public function setCreatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->created_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->created_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = UsersPeer::CREATED_AT;
			}
		} // if either are not null

		return $this;
	} // setCreatedAt()

	/**
	 * Sets the value of [updated_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Users The current object (for fluent API support)
	 */
	public function setUpdatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->updated_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->updated_at !== null && $tmpDt = new DateTime($this->updated_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->updated_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = UsersPeer::UPDATED_AT;
			}
		} // if either are not null

		return $this;
	} // setUpdatedAt()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->use_id2 = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->use_id = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->con_id = ($row[$startcol + 2] !== null) ? (int) $row[$startcol + 2] : null;
			$this->use_name = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->use_first_name = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->use_middle_name = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->use_last_name = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->use_gender = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->use_locale = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->use_link = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->use_birthday = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->use_email = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->use_location = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->use_website = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->created_at = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->updated_at = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 16; // 16 = UsersPeer::NUM_COLUMNS - UsersPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Users object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aConcurso !== null && $this->con_id !== $this->aConcurso->getConId()) {
			$this->aConcurso = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(UsersPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = UsersPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aConcurso = null;
			$this->collCheckinss = null;
			$this->lastCheckinsCriteria = null;

			$this->collFriendss = null;
			$this->lastFriendsCriteria = null;

			$this->collGroupss = null;
			$this->lastGroupsCriteria = null;

			$this->collInterests = null;
			$this->lastInterestCriteria = null;

			$this->collLikess = null;
			$this->lastLikesCriteria = null;

			$this->collPagess = null;
			$this->lastPagesCriteria = null;

			$this->collStatusess = null;
			$this->lastStatusesCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(UsersPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseUsers:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			
			    return;
			  }
			}

			if ($ret) {
				UsersPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseUsers:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(UsersPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseUsers:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    $con->commit();
			
			    return $affectedRows;
			  }
			}

			// symfony_timestampable behavior
			if ($this->isModified() && !$this->isColumnModified(UsersPeer::UPDATED_AT))
			{
			  $this->setUpdatedAt(time());
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
				// symfony_timestampable behavior
				if (!$this->isColumnModified(UsersPeer::CREATED_AT))
				{
				  $this->setCreatedAt(time());
				}

			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseUsers:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				UsersPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aConcurso !== null) {
				if ($this->aConcurso->isModified() || $this->aConcurso->isNew()) {
					$affectedRows += $this->aConcurso->save($con);
				}
				$this->setConcurso($this->aConcurso);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = UsersPeer::USE_ID2;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = UsersPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setUseId2($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += UsersPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collCheckinss !== null) {
				foreach ($this->collCheckinss as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collFriendss !== null) {
				foreach ($this->collFriendss as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collGroupss !== null) {
				foreach ($this->collGroupss as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collInterests !== null) {
				foreach ($this->collInterests as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collLikess !== null) {
				foreach ($this->collLikess as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collPagess !== null) {
				foreach ($this->collPagess as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collStatusess !== null) {
				foreach ($this->collStatusess as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aConcurso !== null) {
				if (!$this->aConcurso->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aConcurso->getValidationFailures());
				}
			}


			if (($retval = UsersPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collCheckinss !== null) {
					foreach ($this->collCheckinss as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collFriendss !== null) {
					foreach ($this->collFriendss as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collGroupss !== null) {
					foreach ($this->collGroupss as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collInterests !== null) {
					foreach ($this->collInterests as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collLikess !== null) {
					foreach ($this->collLikess as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collPagess !== null) {
					foreach ($this->collPagess as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collStatusess !== null) {
					foreach ($this->collStatusess as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = UsersPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getUseId2();
				break;
			case 1:
				return $this->getUseId();
				break;
			case 2:
				return $this->getConId();
				break;
			case 3:
				return $this->getUseName();
				break;
			case 4:
				return $this->getUseFirstName();
				break;
			case 5:
				return $this->getUseMiddleName();
				break;
			case 6:
				return $this->getUseLastName();
				break;
			case 7:
				return $this->getUseGender();
				break;
			case 8:
				return $this->getUseLocale();
				break;
			case 9:
				return $this->getUseLink();
				break;
			case 10:
				return $this->getUseBirthday();
				break;
			case 11:
				return $this->getUseEmail();
				break;
			case 12:
				return $this->getUseLocation();
				break;
			case 13:
				return $this->getUseWebsite();
				break;
			case 14:
				return $this->getCreatedAt();
				break;
			case 15:
				return $this->getUpdatedAt();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = UsersPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getUseId2(),
			$keys[1] => $this->getUseId(),
			$keys[2] => $this->getConId(),
			$keys[3] => $this->getUseName(),
			$keys[4] => $this->getUseFirstName(),
			$keys[5] => $this->getUseMiddleName(),
			$keys[6] => $this->getUseLastName(),
			$keys[7] => $this->getUseGender(),
			$keys[8] => $this->getUseLocale(),
			$keys[9] => $this->getUseLink(),
			$keys[10] => $this->getUseBirthday(),
			$keys[11] => $this->getUseEmail(),
			$keys[12] => $this->getUseLocation(),
			$keys[13] => $this->getUseWebsite(),
			$keys[14] => $this->getCreatedAt(),
			$keys[15] => $this->getUpdatedAt(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = UsersPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setUseId2($value);
				break;
			case 1:
				$this->setUseId($value);
				break;
			case 2:
				$this->setConId($value);
				break;
			case 3:
				$this->setUseName($value);
				break;
			case 4:
				$this->setUseFirstName($value);
				break;
			case 5:
				$this->setUseMiddleName($value);
				break;
			case 6:
				$this->setUseLastName($value);
				break;
			case 7:
				$this->setUseGender($value);
				break;
			case 8:
				$this->setUseLocale($value);
				break;
			case 9:
				$this->setUseLink($value);
				break;
			case 10:
				$this->setUseBirthday($value);
				break;
			case 11:
				$this->setUseEmail($value);
				break;
			case 12:
				$this->setUseLocation($value);
				break;
			case 13:
				$this->setUseWebsite($value);
				break;
			case 14:
				$this->setCreatedAt($value);
				break;
			case 15:
				$this->setUpdatedAt($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = UsersPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setUseId2($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setUseId($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setConId($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setUseName($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setUseFirstName($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setUseMiddleName($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setUseLastName($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setUseGender($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setUseLocale($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setUseLink($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setUseBirthday($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setUseEmail($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setUseLocation($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setUseWebsite($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setCreatedAt($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setUpdatedAt($arr[$keys[15]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(UsersPeer::DATABASE_NAME);

		if ($this->isColumnModified(UsersPeer::USE_ID2)) $criteria->add(UsersPeer::USE_ID2, $this->use_id2);
		if ($this->isColumnModified(UsersPeer::USE_ID)) $criteria->add(UsersPeer::USE_ID, $this->use_id);
		if ($this->isColumnModified(UsersPeer::CON_ID)) $criteria->add(UsersPeer::CON_ID, $this->con_id);
		if ($this->isColumnModified(UsersPeer::USE_NAME)) $criteria->add(UsersPeer::USE_NAME, $this->use_name);
		if ($this->isColumnModified(UsersPeer::USE_FIRST_NAME)) $criteria->add(UsersPeer::USE_FIRST_NAME, $this->use_first_name);
		if ($this->isColumnModified(UsersPeer::USE_MIDDLE_NAME)) $criteria->add(UsersPeer::USE_MIDDLE_NAME, $this->use_middle_name);
		if ($this->isColumnModified(UsersPeer::USE_LAST_NAME)) $criteria->add(UsersPeer::USE_LAST_NAME, $this->use_last_name);
		if ($this->isColumnModified(UsersPeer::USE_GENDER)) $criteria->add(UsersPeer::USE_GENDER, $this->use_gender);
		if ($this->isColumnModified(UsersPeer::USE_LOCALE)) $criteria->add(UsersPeer::USE_LOCALE, $this->use_locale);
		if ($this->isColumnModified(UsersPeer::USE_LINK)) $criteria->add(UsersPeer::USE_LINK, $this->use_link);
		if ($this->isColumnModified(UsersPeer::USE_BIRTHDAY)) $criteria->add(UsersPeer::USE_BIRTHDAY, $this->use_birthday);
		if ($this->isColumnModified(UsersPeer::USE_EMAIL)) $criteria->add(UsersPeer::USE_EMAIL, $this->use_email);
		if ($this->isColumnModified(UsersPeer::USE_LOCATION)) $criteria->add(UsersPeer::USE_LOCATION, $this->use_location);
		if ($this->isColumnModified(UsersPeer::USE_WEBSITE)) $criteria->add(UsersPeer::USE_WEBSITE, $this->use_website);
		if ($this->isColumnModified(UsersPeer::CREATED_AT)) $criteria->add(UsersPeer::CREATED_AT, $this->created_at);
		if ($this->isColumnModified(UsersPeer::UPDATED_AT)) $criteria->add(UsersPeer::UPDATED_AT, $this->updated_at);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(UsersPeer::DATABASE_NAME);

		$criteria->add(UsersPeer::USE_ID2, $this->use_id2);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getUseId2();
	}

	/**
	 * Generic method to set the primary key (use_id2 column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setUseId2($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Users (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setUseId($this->use_id);

		$copyObj->setConId($this->con_id);

		$copyObj->setUseName($this->use_name);

		$copyObj->setUseFirstName($this->use_first_name);

		$copyObj->setUseMiddleName($this->use_middle_name);

		$copyObj->setUseLastName($this->use_last_name);

		$copyObj->setUseGender($this->use_gender);

		$copyObj->setUseLocale($this->use_locale);

		$copyObj->setUseLink($this->use_link);

		$copyObj->setUseBirthday($this->use_birthday);

		$copyObj->setUseEmail($this->use_email);

		$copyObj->setUseLocation($this->use_location);

		$copyObj->setUseWebsite($this->use_website);

		$copyObj->setCreatedAt($this->created_at);

		$copyObj->setUpdatedAt($this->updated_at);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getCheckinss() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addCheckins($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getFriendss() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addFriends($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getGroupss() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addGroups($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getInterests() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addInterest($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getLikess() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addLikes($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getPagess() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addPages($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getStatusess() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addStatuses($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setUseId2(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Users Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     UsersPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new UsersPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Concurso object.
	 *
	 * @param      Concurso $v
	 * @return     Users The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setConcurso(Concurso $v = null)
	{
		if ($v === null) {
			$this->setConId(NULL);
		} else {
			$this->setConId($v->getConId());
		}

		$this->aConcurso = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Concurso object, it will not be re-added.
		if ($v !== null) {
			$v->addUsers($this);
		}

		return $this;
	}


	/**
	 * Get the associated Concurso object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Concurso The associated Concurso object.
	 * @throws     PropelException
	 */
	public function getConcurso(PropelPDO $con = null)
	{
		if ($this->aConcurso === null && ($this->con_id !== null)) {
			$this->aConcurso = ConcursoPeer::retrieveByPk($this->con_id);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aConcurso->addUserss($this);
			 */
		}
		return $this->aConcurso;
	}

	/**
	 * Clears out the collCheckinss collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addCheckinss()
	 */
	public function clearCheckinss()
	{
		$this->collCheckinss = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collCheckinss collection (array).
	 *
	 * By default this just sets the collCheckinss collection to an empty array (like clearcollCheckinss());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initCheckinss()
	{
		$this->collCheckinss = array();
	}

	/**
	 * Gets an array of Checkins objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Users has previously been saved, it will retrieve
	 * related Checkinss from storage. If this Users is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Checkins[]
	 * @throws     PropelException
	 */
	public function getCheckinss($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsersPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCheckinss === null) {
			if ($this->isNew()) {
			   $this->collCheckinss = array();
			} else {

				$criteria->add(CheckinsPeer::USE_ID2, $this->use_id2);

				CheckinsPeer::addSelectColumns($criteria);
				$this->collCheckinss = CheckinsPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(CheckinsPeer::USE_ID2, $this->use_id2);

				CheckinsPeer::addSelectColumns($criteria);
				if (!isset($this->lastCheckinsCriteria) || !$this->lastCheckinsCriteria->equals($criteria)) {
					$this->collCheckinss = CheckinsPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastCheckinsCriteria = $criteria;
		return $this->collCheckinss;
	}

	/**
	 * Returns the number of related Checkins objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Checkins objects.
	 * @throws     PropelException
	 */
	public function countCheckinss(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsersPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collCheckinss === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(CheckinsPeer::USE_ID2, $this->use_id2);

				$count = CheckinsPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(CheckinsPeer::USE_ID2, $this->use_id2);

				if (!isset($this->lastCheckinsCriteria) || !$this->lastCheckinsCriteria->equals($criteria)) {
					$count = CheckinsPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collCheckinss);
				}
			} else {
				$count = count($this->collCheckinss);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Checkins object to this object
	 * through the Checkins foreign key attribute.
	 *
	 * @param      Checkins $l Checkins
	 * @return     void
	 * @throws     PropelException
	 */
	public function addCheckins(Checkins $l)
	{
		if ($this->collCheckinss === null) {
			$this->initCheckinss();
		}
		if (!in_array($l, $this->collCheckinss, true)) { // only add it if the **same** object is not already associated
			array_push($this->collCheckinss, $l);
			$l->setUsers($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Users is new, it will return
	 * an empty collection; or if this Users has previously
	 * been saved, it will retrieve related Checkinss from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Users.
	 */
	public function getCheckinssJoinConcurso($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsersPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCheckinss === null) {
			if ($this->isNew()) {
				$this->collCheckinss = array();
			} else {

				$criteria->add(CheckinsPeer::USE_ID2, $this->use_id2);

				$this->collCheckinss = CheckinsPeer::doSelectJoinConcurso($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CheckinsPeer::USE_ID2, $this->use_id2);

			if (!isset($this->lastCheckinsCriteria) || !$this->lastCheckinsCriteria->equals($criteria)) {
				$this->collCheckinss = CheckinsPeer::doSelectJoinConcurso($criteria, $con, $join_behavior);
			}
		}
		$this->lastCheckinsCriteria = $criteria;

		return $this->collCheckinss;
	}

	/**
	 * Clears out the collFriendss collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addFriendss()
	 */
	public function clearFriendss()
	{
		$this->collFriendss = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collFriendss collection (array).
	 *
	 * By default this just sets the collFriendss collection to an empty array (like clearcollFriendss());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initFriendss()
	{
		$this->collFriendss = array();
	}

	/**
	 * Gets an array of Friends objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Users has previously been saved, it will retrieve
	 * related Friendss from storage. If this Users is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Friends[]
	 * @throws     PropelException
	 */
	public function getFriendss($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsersPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collFriendss === null) {
			if ($this->isNew()) {
			   $this->collFriendss = array();
			} else {

				$criteria->add(FriendsPeer::USE_ID2, $this->use_id2);

				FriendsPeer::addSelectColumns($criteria);
				$this->collFriendss = FriendsPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(FriendsPeer::USE_ID2, $this->use_id2);

				FriendsPeer::addSelectColumns($criteria);
				if (!isset($this->lastFriendsCriteria) || !$this->lastFriendsCriteria->equals($criteria)) {
					$this->collFriendss = FriendsPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastFriendsCriteria = $criteria;
		return $this->collFriendss;
	}

	/**
	 * Returns the number of related Friends objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Friends objects.
	 * @throws     PropelException
	 */
	public function countFriendss(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsersPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collFriendss === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(FriendsPeer::USE_ID2, $this->use_id2);

				$count = FriendsPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(FriendsPeer::USE_ID2, $this->use_id2);

				if (!isset($this->lastFriendsCriteria) || !$this->lastFriendsCriteria->equals($criteria)) {
					$count = FriendsPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collFriendss);
				}
			} else {
				$count = count($this->collFriendss);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Friends object to this object
	 * through the Friends foreign key attribute.
	 *
	 * @param      Friends $l Friends
	 * @return     void
	 * @throws     PropelException
	 */
	public function addFriends(Friends $l)
	{
		if ($this->collFriendss === null) {
			$this->initFriendss();
		}
		if (!in_array($l, $this->collFriendss, true)) { // only add it if the **same** object is not already associated
			array_push($this->collFriendss, $l);
			$l->setUsers($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Users is new, it will return
	 * an empty collection; or if this Users has previously
	 * been saved, it will retrieve related Friendss from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Users.
	 */
	public function getFriendssJoinConcurso($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsersPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collFriendss === null) {
			if ($this->isNew()) {
				$this->collFriendss = array();
			} else {

				$criteria->add(FriendsPeer::USE_ID2, $this->use_id2);

				$this->collFriendss = FriendsPeer::doSelectJoinConcurso($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(FriendsPeer::USE_ID2, $this->use_id2);

			if (!isset($this->lastFriendsCriteria) || !$this->lastFriendsCriteria->equals($criteria)) {
				$this->collFriendss = FriendsPeer::doSelectJoinConcurso($criteria, $con, $join_behavior);
			}
		}
		$this->lastFriendsCriteria = $criteria;

		return $this->collFriendss;
	}

	/**
	 * Clears out the collGroupss collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addGroupss()
	 */
	public function clearGroupss()
	{
		$this->collGroupss = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collGroupss collection (array).
	 *
	 * By default this just sets the collGroupss collection to an empty array (like clearcollGroupss());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initGroupss()
	{
		$this->collGroupss = array();
	}

	/**
	 * Gets an array of Groups objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Users has previously been saved, it will retrieve
	 * related Groupss from storage. If this Users is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Groups[]
	 * @throws     PropelException
	 */
	public function getGroupss($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsersPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collGroupss === null) {
			if ($this->isNew()) {
			   $this->collGroupss = array();
			} else {

				$criteria->add(GroupsPeer::USE_ID2, $this->use_id2);

				GroupsPeer::addSelectColumns($criteria);
				$this->collGroupss = GroupsPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(GroupsPeer::USE_ID2, $this->use_id2);

				GroupsPeer::addSelectColumns($criteria);
				if (!isset($this->lastGroupsCriteria) || !$this->lastGroupsCriteria->equals($criteria)) {
					$this->collGroupss = GroupsPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastGroupsCriteria = $criteria;
		return $this->collGroupss;
	}

	/**
	 * Returns the number of related Groups objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Groups objects.
	 * @throws     PropelException
	 */
	public function countGroupss(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsersPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collGroupss === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(GroupsPeer::USE_ID2, $this->use_id2);

				$count = GroupsPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(GroupsPeer::USE_ID2, $this->use_id2);

				if (!isset($this->lastGroupsCriteria) || !$this->lastGroupsCriteria->equals($criteria)) {
					$count = GroupsPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collGroupss);
				}
			} else {
				$count = count($this->collGroupss);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Groups object to this object
	 * through the Groups foreign key attribute.
	 *
	 * @param      Groups $l Groups
	 * @return     void
	 * @throws     PropelException
	 */
	public function addGroups(Groups $l)
	{
		if ($this->collGroupss === null) {
			$this->initGroupss();
		}
		if (!in_array($l, $this->collGroupss, true)) { // only add it if the **same** object is not already associated
			array_push($this->collGroupss, $l);
			$l->setUsers($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Users is new, it will return
	 * an empty collection; or if this Users has previously
	 * been saved, it will retrieve related Groupss from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Users.
	 */
	public function getGroupssJoinConcurso($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsersPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collGroupss === null) {
			if ($this->isNew()) {
				$this->collGroupss = array();
			} else {

				$criteria->add(GroupsPeer::USE_ID2, $this->use_id2);

				$this->collGroupss = GroupsPeer::doSelectJoinConcurso($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(GroupsPeer::USE_ID2, $this->use_id2);

			if (!isset($this->lastGroupsCriteria) || !$this->lastGroupsCriteria->equals($criteria)) {
				$this->collGroupss = GroupsPeer::doSelectJoinConcurso($criteria, $con, $join_behavior);
			}
		}
		$this->lastGroupsCriteria = $criteria;

		return $this->collGroupss;
	}

	/**
	 * Clears out the collInterests collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addInterests()
	 */
	public function clearInterests()
	{
		$this->collInterests = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collInterests collection (array).
	 *
	 * By default this just sets the collInterests collection to an empty array (like clearcollInterests());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initInterests()
	{
		$this->collInterests = array();
	}

	/**
	 * Gets an array of Interest objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Users has previously been saved, it will retrieve
	 * related Interests from storage. If this Users is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Interest[]
	 * @throws     PropelException
	 */
	public function getInterests($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsersPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collInterests === null) {
			if ($this->isNew()) {
			   $this->collInterests = array();
			} else {

				$criteria->add(InterestPeer::USE_ID2, $this->use_id2);

				InterestPeer::addSelectColumns($criteria);
				$this->collInterests = InterestPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(InterestPeer::USE_ID2, $this->use_id2);

				InterestPeer::addSelectColumns($criteria);
				if (!isset($this->lastInterestCriteria) || !$this->lastInterestCriteria->equals($criteria)) {
					$this->collInterests = InterestPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastInterestCriteria = $criteria;
		return $this->collInterests;
	}

	/**
	 * Returns the number of related Interest objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Interest objects.
	 * @throws     PropelException
	 */
	public function countInterests(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsersPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collInterests === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(InterestPeer::USE_ID2, $this->use_id2);

				$count = InterestPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(InterestPeer::USE_ID2, $this->use_id2);

				if (!isset($this->lastInterestCriteria) || !$this->lastInterestCriteria->equals($criteria)) {
					$count = InterestPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collInterests);
				}
			} else {
				$count = count($this->collInterests);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Interest object to this object
	 * through the Interest foreign key attribute.
	 *
	 * @param      Interest $l Interest
	 * @return     void
	 * @throws     PropelException
	 */
	public function addInterest(Interest $l)
	{
		if ($this->collInterests === null) {
			$this->initInterests();
		}
		if (!in_array($l, $this->collInterests, true)) { // only add it if the **same** object is not already associated
			array_push($this->collInterests, $l);
			$l->setUsers($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Users is new, it will return
	 * an empty collection; or if this Users has previously
	 * been saved, it will retrieve related Interests from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Users.
	 */
	public function getInterestsJoinConcurso($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsersPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collInterests === null) {
			if ($this->isNew()) {
				$this->collInterests = array();
			} else {

				$criteria->add(InterestPeer::USE_ID2, $this->use_id2);

				$this->collInterests = InterestPeer::doSelectJoinConcurso($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(InterestPeer::USE_ID2, $this->use_id2);

			if (!isset($this->lastInterestCriteria) || !$this->lastInterestCriteria->equals($criteria)) {
				$this->collInterests = InterestPeer::doSelectJoinConcurso($criteria, $con, $join_behavior);
			}
		}
		$this->lastInterestCriteria = $criteria;

		return $this->collInterests;
	}

	/**
	 * Clears out the collLikess collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addLikess()
	 */
	public function clearLikess()
	{
		$this->collLikess = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collLikess collection (array).
	 *
	 * By default this just sets the collLikess collection to an empty array (like clearcollLikess());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initLikess()
	{
		$this->collLikess = array();
	}

	/**
	 * Gets an array of Likes objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Users has previously been saved, it will retrieve
	 * related Likess from storage. If this Users is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Likes[]
	 * @throws     PropelException
	 */
	public function getLikess($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsersPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collLikess === null) {
			if ($this->isNew()) {
			   $this->collLikess = array();
			} else {

				$criteria->add(LikesPeer::USE_ID2, $this->use_id2);

				LikesPeer::addSelectColumns($criteria);
				$this->collLikess = LikesPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(LikesPeer::USE_ID2, $this->use_id2);

				LikesPeer::addSelectColumns($criteria);
				if (!isset($this->lastLikesCriteria) || !$this->lastLikesCriteria->equals($criteria)) {
					$this->collLikess = LikesPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastLikesCriteria = $criteria;
		return $this->collLikess;
	}

	/**
	 * Returns the number of related Likes objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Likes objects.
	 * @throws     PropelException
	 */
	public function countLikess(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsersPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collLikess === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(LikesPeer::USE_ID2, $this->use_id2);

				$count = LikesPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(LikesPeer::USE_ID2, $this->use_id2);

				if (!isset($this->lastLikesCriteria) || !$this->lastLikesCriteria->equals($criteria)) {
					$count = LikesPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collLikess);
				}
			} else {
				$count = count($this->collLikess);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Likes object to this object
	 * through the Likes foreign key attribute.
	 *
	 * @param      Likes $l Likes
	 * @return     void
	 * @throws     PropelException
	 */
	public function addLikes(Likes $l)
	{
		if ($this->collLikess === null) {
			$this->initLikess();
		}
		if (!in_array($l, $this->collLikess, true)) { // only add it if the **same** object is not already associated
			array_push($this->collLikess, $l);
			$l->setUsers($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Users is new, it will return
	 * an empty collection; or if this Users has previously
	 * been saved, it will retrieve related Likess from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Users.
	 */
	public function getLikessJoinConcurso($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsersPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collLikess === null) {
			if ($this->isNew()) {
				$this->collLikess = array();
			} else {

				$criteria->add(LikesPeer::USE_ID2, $this->use_id2);

				$this->collLikess = LikesPeer::doSelectJoinConcurso($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(LikesPeer::USE_ID2, $this->use_id2);

			if (!isset($this->lastLikesCriteria) || !$this->lastLikesCriteria->equals($criteria)) {
				$this->collLikess = LikesPeer::doSelectJoinConcurso($criteria, $con, $join_behavior);
			}
		}
		$this->lastLikesCriteria = $criteria;

		return $this->collLikess;
	}

	/**
	 * Clears out the collPagess collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addPagess()
	 */
	public function clearPagess()
	{
		$this->collPagess = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collPagess collection (array).
	 *
	 * By default this just sets the collPagess collection to an empty array (like clearcollPagess());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initPagess()
	{
		$this->collPagess = array();
	}

	/**
	 * Gets an array of Pages objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Users has previously been saved, it will retrieve
	 * related Pagess from storage. If this Users is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Pages[]
	 * @throws     PropelException
	 */
	public function getPagess($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsersPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPagess === null) {
			if ($this->isNew()) {
			   $this->collPagess = array();
			} else {

				$criteria->add(PagesPeer::USE_ID2, $this->use_id2);

				PagesPeer::addSelectColumns($criteria);
				$this->collPagess = PagesPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(PagesPeer::USE_ID2, $this->use_id2);

				PagesPeer::addSelectColumns($criteria);
				if (!isset($this->lastPagesCriteria) || !$this->lastPagesCriteria->equals($criteria)) {
					$this->collPagess = PagesPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastPagesCriteria = $criteria;
		return $this->collPagess;
	}

	/**
	 * Returns the number of related Pages objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Pages objects.
	 * @throws     PropelException
	 */
	public function countPagess(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsersPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collPagess === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(PagesPeer::USE_ID2, $this->use_id2);

				$count = PagesPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(PagesPeer::USE_ID2, $this->use_id2);

				if (!isset($this->lastPagesCriteria) || !$this->lastPagesCriteria->equals($criteria)) {
					$count = PagesPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collPagess);
				}
			} else {
				$count = count($this->collPagess);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Pages object to this object
	 * through the Pages foreign key attribute.
	 *
	 * @param      Pages $l Pages
	 * @return     void
	 * @throws     PropelException
	 */
	public function addPages(Pages $l)
	{
		if ($this->collPagess === null) {
			$this->initPagess();
		}
		if (!in_array($l, $this->collPagess, true)) { // only add it if the **same** object is not already associated
			array_push($this->collPagess, $l);
			$l->setUsers($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Users is new, it will return
	 * an empty collection; or if this Users has previously
	 * been saved, it will retrieve related Pagess from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Users.
	 */
	public function getPagessJoinConcurso($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsersPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPagess === null) {
			if ($this->isNew()) {
				$this->collPagess = array();
			} else {

				$criteria->add(PagesPeer::USE_ID2, $this->use_id2);

				$this->collPagess = PagesPeer::doSelectJoinConcurso($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PagesPeer::USE_ID2, $this->use_id2);

			if (!isset($this->lastPagesCriteria) || !$this->lastPagesCriteria->equals($criteria)) {
				$this->collPagess = PagesPeer::doSelectJoinConcurso($criteria, $con, $join_behavior);
			}
		}
		$this->lastPagesCriteria = $criteria;

		return $this->collPagess;
	}

	/**
	 * Clears out the collStatusess collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addStatusess()
	 */
	public function clearStatusess()
	{
		$this->collStatusess = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collStatusess collection (array).
	 *
	 * By default this just sets the collStatusess collection to an empty array (like clearcollStatusess());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initStatusess()
	{
		$this->collStatusess = array();
	}

	/**
	 * Gets an array of Statuses objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Users has previously been saved, it will retrieve
	 * related Statusess from storage. If this Users is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Statuses[]
	 * @throws     PropelException
	 */
	public function getStatusess($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsersPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collStatusess === null) {
			if ($this->isNew()) {
			   $this->collStatusess = array();
			} else {

				$criteria->add(StatusesPeer::USE_ID2, $this->use_id2);

				StatusesPeer::addSelectColumns($criteria);
				$this->collStatusess = StatusesPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(StatusesPeer::USE_ID2, $this->use_id2);

				StatusesPeer::addSelectColumns($criteria);
				if (!isset($this->lastStatusesCriteria) || !$this->lastStatusesCriteria->equals($criteria)) {
					$this->collStatusess = StatusesPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastStatusesCriteria = $criteria;
		return $this->collStatusess;
	}

	/**
	 * Returns the number of related Statuses objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Statuses objects.
	 * @throws     PropelException
	 */
	public function countStatusess(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsersPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collStatusess === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(StatusesPeer::USE_ID2, $this->use_id2);

				$count = StatusesPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(StatusesPeer::USE_ID2, $this->use_id2);

				if (!isset($this->lastStatusesCriteria) || !$this->lastStatusesCriteria->equals($criteria)) {
					$count = StatusesPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collStatusess);
				}
			} else {
				$count = count($this->collStatusess);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Statuses object to this object
	 * through the Statuses foreign key attribute.
	 *
	 * @param      Statuses $l Statuses
	 * @return     void
	 * @throws     PropelException
	 */
	public function addStatuses(Statuses $l)
	{
		if ($this->collStatusess === null) {
			$this->initStatusess();
		}
		if (!in_array($l, $this->collStatusess, true)) { // only add it if the **same** object is not already associated
			array_push($this->collStatusess, $l);
			$l->setUsers($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Users is new, it will return
	 * an empty collection; or if this Users has previously
	 * been saved, it will retrieve related Statusess from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Users.
	 */
	public function getStatusessJoinConcurso($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsersPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collStatusess === null) {
			if ($this->isNew()) {
				$this->collStatusess = array();
			} else {

				$criteria->add(StatusesPeer::USE_ID2, $this->use_id2);

				$this->collStatusess = StatusesPeer::doSelectJoinConcurso($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(StatusesPeer::USE_ID2, $this->use_id2);

			if (!isset($this->lastStatusesCriteria) || !$this->lastStatusesCriteria->equals($criteria)) {
				$this->collStatusess = StatusesPeer::doSelectJoinConcurso($criteria, $con, $join_behavior);
			}
		}
		$this->lastStatusesCriteria = $criteria;

		return $this->collStatusess;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collCheckinss) {
				foreach ((array) $this->collCheckinss as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collFriendss) {
				foreach ((array) $this->collFriendss as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collGroupss) {
				foreach ((array) $this->collGroupss as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collInterests) {
				foreach ((array) $this->collInterests as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collLikess) {
				foreach ((array) $this->collLikess as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collPagess) {
				foreach ((array) $this->collPagess as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collStatusess) {
				foreach ((array) $this->collStatusess as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collCheckinss = null;
		$this->collFriendss = null;
		$this->collGroupss = null;
		$this->collInterests = null;
		$this->collLikess = null;
		$this->collPagess = null;
		$this->collStatusess = null;
			$this->aConcurso = null;
	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BaseUsers:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BaseUsers::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BaseUsers
